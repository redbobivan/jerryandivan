//Qlik View Script

/*
The script is used to gather the information for the coverage between two tables

@param 1: p_KeyField: the key between the two tables
@param 2: p_Table1: the first table of the two tables in the coverage
@param 3: p_Table2: the second table of the two tables in the coverage
@param 4: p_Connector: the connector string between the two tables

Example:
  Call QSC.DQ.Model.MaintainCoverage('%key','Dimension', 'Fact', '_');
Consequence:
  In the data model, there will be a new table created called DQ_Coverage_Dimension_Fact
     it contains the following fields:
        $(Table1)$(Table2)_Coverage,
        $(p_KeyField),
        $(p_Table1)_Flag,
        $(p_Table2)_Flag
*/

Sub QSC.DQ.Model.MaintainCoverage(p_KeyField, p_Table1, p_Table2, p_Connector)

	Unqualify *;
    $(p_Table1)$(p_Connector)$(p_Table2)_Base:
	  Load Distinct $(p_KeyField),1 as $(p_Table1)_Flag,0 as $(p_Table2)_Flag Resident $(p_Table1);
	  Load Distinct $(p_KeyField),0 as $(p_Table1)_Flag,1 as $(p_Table2)_Flag Resident $(p_Table1);

	DQ_Coverage_$(p_Table1)$(p_Connector)$(p_Table2):
	NoConcatenate
    Load 
		If($(p_Table1)_Flag='Yes' And $(p_Table2)_Flag='Yes','Both', 
        	If($(p_Table1)_Flag='Yes','$(p_Table1) Only','$(p_Table2) Only')) As $(p_Table1)$(p_Table2)_Coverage
			,$(p_KeyField)
			,$(p_Table1)_Flag
			,$(p_Table2)_Flag;
	Load $(p_KeyField),
    	If(sum($(p_Table1)_Flag)=1,'Yes','No') as $(p_Table1)_Flag,
        If(sum($(p_Table2)_Flag)=1,'Yes','No') as $(p_Table2)_Flag
	Resident $(p_Table1)$(p_Connector)$(p_Table2)_Base
	Group By $(p_KeyField);
	
    Drop Table $(p_Table1)$(p_Connector)$(p_Table2)_Base;
    
End Sub


/*
 * Subroutine: SupplementMasterTableAgainstDetailTable
 *
 * Purpose:
 *   This subroutine gathers information for the coverage between two tables.
 *   It creates a new table containing coverage data for the specified main table
 *   and a list of fact tables, including handling missing and null key scenarios.
 *
 * Parameters:
 *   @param 1: p_MainTable - The main dimension table we are maintaining.
 *   @param 2: p_KeyField - The key field between the dimension table and other fact tables.
 *   @param 3: p_TableList - The comma-delimited table list for the fact tables.
 *   @param 4: p_CoreFields - The fields that we would like to put No Correspondent info to.
 *   @param 5: p_KeyAliasField - The local field whose role is also like a key.
 *   @param 6: p_MissinglabelPrefix - The prefix for the missing label.
 *   @param 7: p_NoKeyLabel - The label for the scenario where the key is null.
 *
 * Example Calls:
 *   Call QSC.DQ.Model.SupplementMasterTableAgainstDetailTable(
 *     'Dimension', '%key', 'Fact,Fact2,Fact3', 'Field1,Field2,Field3',
 *     'KeyAliasName', 'Missing', 'NoKey');
 *
 *   Call QSC.DQ.Model.SupplementMasterTableAgainstDetailTable(
 *     'Dimension', '%key', 'Fact,Fact2,Fact3', '*',
 *     'KeyAliasName', 'Missing', 'NoKey');
 *
 * Consequence:
 *   In the data model, a new table will be created called DQ_Coverage_Dimension_Fact
 *   containing the following fields:
 *     - $(Table1)$(Table2)_Coverage
 *     - $(p_KeyField)
 *     - $(Table1)_Flag
 *     - $(Table2)_Flag
 */

Sub QSC.DQ.Model.SupplementMasterTableAgainstDetailTable(
    p_MainTable,
    p_KeyField,
    p_TableList,
    p_CoreFields,
    p_KeyAliasField,
    p_MissinglabelPrefix,
    p_NoKeyLabel)

    // Step 1: Initialization
    Call SupplementMasterTableAgainstDetailTable.InitializeVariables(p_MainTable, p_TableList);
    
    // Step 2: Preparation
    Call SupplementMasterTableAgainstDetailTable.PrepareTableList(p_KeyField);
    
    // Step 3: Load Main and DQ Tables
    Call SupplementMasterTableAgainstDetailTable.LoadMainAndDQTables;
    
    // Step 4: Aggregation processing
    Call SupplementMasterTableAgainstDetailTable.ProcessAggregation(p_KeyField);
    
    // Step 5: Handle Missing Columns
    Call SupplementMasterTableAgainstDetailTable.HandleMissingColumns(p_MainTable, p_KeyField, p_CoreFields, p_KeyAliasField, p_MissinglabelPrefix);
    
    // Step 6: Handle Missing Keys
    Call SupplementMasterTableAgainstDetailTable.HandleMissingKeys(p_MainTable, p_KeyField, p_KeyAliasField, p_NoKeyLabel);
    
    Qualify *;
    Unqualify '%*';
    Nullasnull *;
End Sub

Sub SupplementMasterTableAgainstDetailTable.InitializeVariables(p_MainTable, p_TableList)
    Unqualify *;
    Set v_Table_List_Base = 'DQ_' & p_MainTable;
    Set v_Table_List_Base_First = 1;
    Set v_Table_Load_Statement = ;
    Set v_Agg_Table_Load_Statement = ;
    Set v_Flag_Field_List = ;
    Set v_Agg_Flag_Field_List = ;
    // Get the table list
    Call QSC.Utility.GetDelimitedStringToTable(p_TableList, 'T_List', 'Tables');
End Sub

Sub SupplementMasterTableAgainstDetailTable.PrepareTableList(p_KeyField)
    Let NumRows = NoOfRows('T_List');
    For i = 0 To $(NumRows) - 1
        Let v_TName = Peek('Tables', $(i), 'T_List');
        If v_Table_List_Base_First = 1
            Set v_Table_Prefix = ;
            Set v_Table_PostFix = :;
            Set v_FlagConnector = ;
        Else
            Set v_Table_Prefix = Concatenate(;
            Set v_Table_PostFix = );
            Set v_FlagConnector = ,;
        End If
        Let v_Table_List_Base_First = 0;
        // Construct the load statement for basic flag from each table
        Let v_Table_Load_Statement = v_Table_Load_Statement &
            chr(13) &
            v_Table_Prefix &
            v_Table_List_Base &
            v_Table_PostFix &
            chr(13) &
            'load distinct $(p_KeyField), 1 as $(v_Table_List_Base).$(v_TName)_Flag Resident $(v_TName);';
        // Maintain the Flag Field Lists
        Let v_Flag_Field_List = v_Flag_Field_List &
            v_FlagConnector &
            '$(v_Table_List_Base).$(v_TName)_Flag';
        Let v_Agg_Flag_Field_List = v_Agg_Flag_Field_List &
            v_FlagConnector &
            'if(sum($(v_Table_List_Base).$(v_TName)_Flag) > 0, 1, 0) as $(v_Table_List_Base).$(v_TName)_Flag';
    Next
End Sub

Sub SupplementMasterTableAgainstDetailTable.LoadMainAndDQTables
    Set NullValue = '0';
    NullAsValue $(v_Flag_Field_List);
    $(v_Table_List_Base): $(v_Table_Load_Statement);
    NullAsNull *;
End Sub

Sub SupplementMasterTableAgainstDetailTable.ProcessAggregation(p_KeyField)
    $(v_Table_List_Base)_TEMP:
    NoConcatenate
    Load $(p_KeyField), $(v_Agg_Flag_Field_List) Resident $(v_Table_List_Base) group by $(p_KeyField);
    Drop Table $(v_Table_List_Base);
    Rename Table $(v_Table_List_Base)_TEMP to $(v_Table_List_Base);
    Drop Table T_List;
End Sub

Sub SupplementMasterTableAgainstDetailTable.HandleMissingColumns(p_MainTable, p_KeyField, p_CoreFields, p_KeyAliasField, p_MissinglabelPrefix)
    If Len(p_KeyAliasField) > 0
        Set v_Key = ,$(p_KeyField) as [$(p_KeyAliasField)];
    Else
        Set v_Key = ;
    End If
    
    Unqualify *;
    
    If Len(p_MissinglabelPrefix) = 0
        Let p_MissinglabelPrefix = QSC_Label_Missing_Prefix;
    End If
    
    If p_CoreFields = '*'
        Call QSC.Utility.GetTableFieldListToTable(p_MainTable, 'Tmp_MissingColumns', 'MissingColumn');
    Else
        Tmp_MissingColumns:
        Load Subfield('$(p_CoreFields)', ',') as MissingColumn
        AutoGenerate(1);
    End If
    
    Inner Join (Tmp_MissingColumns)
    Load MissingColumn Resident Tmp_MissingColumns Where MissingColumn <> '$(p_KeyField)' and MissingColumn <> '[$(p_KeyAliasField)]';
    
    Set v_MissingColumnStatement = ;
    Set v_NoKeyColumnStatement = ;
    Let NumRows = NoOfRows('Tmp_MissingColumns');
    
    For i = 0 To $(NumRows) - 1
        Let wMissingColumn = Peek('MissingColumn', $(i), 'Tmp_MissingColumns');
        Let v_MissingColumnStatement = v_MissingColumnStatement &
            ' ''$(p_MissinglabelPrefix) for $(keyColumn) '' & $(p_KeyField) as [$(wMissingColumn)],';
        Let v_NoKeyColumnStatement = v_NoKeyColumnStatement &
            ' ''$(p_NoKeyLabel)'' as [$(wMissingColumn)],';
    Next
    
    Let v_MissingColumnStatement = Left(v_MissingColumnStatement, Len(v_MissingColumnStatement) - 1);
    Let v_NoKeyColumnStatement = Left(v_NoKeyColumnStatement, Len(v_NoKeyColumnStatement) - 1);
    
    Drop Table Tmp_MissingColumns;
    
    If Len(p_CoreFields) > 0
        NullAsValue $(p_CoreFields);
    Else
        NullAsValue *;
    End If
End Sub

Sub SupplementMasterTableAgainstDetailTable.HandleMissingKeys(p_MainTable, p_KeyField, p_KeyAliasField, p_NoKeyLabel)
    Set NullValue = 'No correspondent info';
    Concatenate($(p_MainTable))
    Load $(p_KeyField) $(v_Key), $(v_MissingColumnStatement),
        '$(QSC_Label_Maked_Up)' as DQ_Record_Type
    Resident $(v_Table_List_Base)
    Where $(v_Table_List_Base).$(p_MainTable)_Flag = 0 and
        not IsNull($(p_KeyField)) and
        $(p_KeyField) <> '$(QSC_Label_For_NA)';
    
    Set NullValue = 'No key info';
    Concatenate($(p_MainTable))
    Load $(p_KeyField) $(v_Key), $(v_NoKeyColumnStatement),
        '$(p_NoKeyLabel)' as DQ_Record_Type
    Resident $(v_Table_List_Base)
    Where $(v_Table_List_Base).$(p_MainTable)_Flag = 0 and
        $(p_KeyField) = '$(QSC_Label_For_NA)';
    
    Temp_Dimention:
    Load *, If(IsNull(DQ_Record_Type), '$(QSC_Label_Original)', DQ_Record_Type) as TempDQ_Record_Type
    Resident $(p_MainTable);
    
    Drop Fields DQ_Record_Type;
    Rename Fields TempDQ_Record_Type to DQ_Record_Type;
    
    Drop Table $(p_MainTable);
    Rename Table Temp_Dimention to $(p_MainTable);
End Sub



